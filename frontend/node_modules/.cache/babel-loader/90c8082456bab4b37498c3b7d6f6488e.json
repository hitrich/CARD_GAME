{"ast":null,"code":"var _jsxFileName = \"/Users/fixsc/Documents/eosioProject/frontend/src/components/Game/Game.jsx\";\n// React core\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux'; // Game subcomponents\n\nimport { GameInfo, GameMat, PlayerProfile, Resolution } from './components'; // Services and redux action\n\nimport { UserAction } from 'actions';\nimport { ApiService } from 'services';\n\nclass Game extends Component {\n  constructor(props) {\n    // Inherit constructor\n    super(props); // State for showing/hiding components when the API (blockchain) request is loading\n\n    this.state = {\n      loading: true\n    }; // Bind functions\n\n    this.loadUser = this.loadUser.bind(this);\n    this.handleStartGame = this.handleStartGame.bind(this);\n    this.handlePlayCard = this.handlePlayCard.bind(this);\n    this.handleNextRound = this.handleNextRound.bind(this);\n    this.handleEndGame = this.handleEndGame.bind(this); // Call `loadUser` before mounting the app\n\n    this.loadUser();\n  } // Get latest user object from blockchain\n\n\n  loadUser() {\n    // Extract `setUser` of `UserAction` and `user.name` of UserReducer from redux\n    const _this$props = this.props,\n          setUser = _this$props.setUser,\n          name = _this$props.user.name; // Send request the blockchain by calling the ApiService,\n    // Get the user object and store the `win_count`, `lost_count` and `game_data` object\n\n    return ApiService.getUserByName(name).then(user => {\n      setUser({\n        win_count: user.win_count,\n        lost_count: user.lost_count,\n        game: user.game_data\n      }); // Set the loading state to false for displaying the app\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  handleStartGame() {\n    // Send a request to API (blockchain) to start game\n    // And call `loadUser` again for react to render latest game status to UI\n    return ApiService.startGame().then(() => {\n      return this.loadUser();\n    });\n  }\n\n  handlePlayCard(cardIdx) {\n    // Extract `user.game` of `UserReducer` from redux\n    const game = this.props.user.game; // If it is an empty card, not going to do anything\n\n    if (game.hand_player[cardIdx] === 0) {\n      return;\n    } // Show the loading indicator if the connection took too long\n\n\n    this.setState({\n      loading: true\n    }); // Send a request to API (blockchain) to play card with card index\n    // And call `loadUser` again for react to render latest game status to UI\n\n    return ApiService.playCard(cardIdx).then(() => {\n      return this.loadUser();\n    });\n  }\n\n  handleNextRound() {\n    // Send a request to API (blockchain) to trigger next round\n    // And call `loadUser` again for react to render latest game status to UI\n    return ApiService.nextRound().then(() => {\n      return this.loadUser();\n    });\n  }\n\n  handleEndGame() {\n    // Send a request to API (blockchain) to end the game\n    // And call `loadUser` again for react to render latest game status to UI\n    return ApiService.endGame().then(() => {\n      return this.loadUser();\n    });\n  }\n\n  render() {\n    // Extract data from state and user data of `UserReducer` from redux\n    const loading = this.state.loading;\n    const _this$props$user = this.props.user,\n          name = _this$props$user.name,\n          win_count = _this$props$user.win_count,\n          lost_count = _this$props$user.lost_count,\n          game = _this$props$user.game; // Flag to indicate if the game has started or not\n    // By checking if the deckCard of AI is still 17 (max card)\n\n    const isGameStarted = game && game.deck_ai.length !== 17; // If game hasn't started, display `PlayerProfile`\n    // If game has started, display `GameMat`, `Resolution`, `Info` screen\n\n    return React.createElement(\"section\", {\n      className: \"Game\".concat(loading ? \" loading\" : \"\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, !isGameStarted ? React.createElement(PlayerProfile, {\n      name: name,\n      winCount: win_count,\n      lostCount: lost_count,\n      onLogout: this.handleLogout,\n      onStartGame: this.handleStartGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }) : React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(GameMat, {\n      deckCardCount: game.deck_ai.length,\n      aiLife: game.life_ai,\n      aiHandCards: game.hand_ai,\n      aiName: \"COMPUTER\",\n      playerLife: game.life_player,\n      playerHandCards: game.hand_player,\n      playerName: name,\n      onPlayCard: this.handlePlayCard,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }), React.createElement(Resolution, {\n      status: game.status,\n      aiCard: game.selected_card_ai,\n      aiName: \"COMPUTER\",\n      aiLost: game.life_lost_ai,\n      playerCard: game.selected_card_player,\n      playerName: name,\n      playerLost: game.life_lost_player,\n      onNextRound: this.handleNextRound,\n      onEndGame: this.handleEndGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }), React.createElement(GameInfo, {\n      deckCardCount: game.deck_ai.length,\n      handCardCount: game.hand_ai.filter(x => x > 0).length,\n      onEndGame: this.handleEndGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    })), isGameStarted && loading && React.createElement(\"div\", {\n      className: \"spinner\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"image\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"circles\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"circle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"inner\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"circle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"inner\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"circle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"inner\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"circle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"inner\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"circle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"inner\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    })))));\n  }\n\n} // Map all state to component props (for redux to connect)\n\n\nconst mapStateToProps = state => state; // Map the following action to props\n\n\nconst mapDispatchToProps = {\n  setUser: UserAction.setUser\n}; // Export a redux connected component\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","map":{"version":3,"sources":["/Users/fixsc/Documents/eosioProject/frontend/src/components/Game/Game.jsx"],"names":["React","Component","connect","GameInfo","GameMat","PlayerProfile","Resolution","UserAction","ApiService","Game","constructor","props","state","loading","loadUser","bind","handleStartGame","handlePlayCard","handleNextRound","handleEndGame","setUser","name","user","getUserByName","then","win_count","lost_count","game","game_data","setState","startGame","cardIdx","hand_player","playCard","nextRound","endGame","render","isGameStarted","deck_ai","length","handleLogout","life_ai","hand_ai","life_player","status","selected_card_ai","life_lost_ai","selected_card_player","life_lost_player","filter","x","mapStateToProps","mapDispatchToProps"],"mappings":"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","sourcesContent":["// React core\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n// Game subcomponents\nimport { GameInfo, GameMat, PlayerProfile, Resolution } from './components';\n// Services and redux action\nimport { UserAction } from 'actions';\nimport { ApiService } from 'services';\n\nclass Game extends Component {\n\n  constructor(props) {\n    // Inherit constructor\n    super(props);\n    // State for showing/hiding components when the API (blockchain) request is loading\n    this.state = {\n      loading: true,\n    };\n    // Bind functions\n    this.loadUser = this.loadUser.bind(this);\n    this.handleStartGame = this.handleStartGame.bind(this);\n    this.handlePlayCard = this.handlePlayCard.bind(this);\n    this.handleNextRound = this.handleNextRound.bind(this);\n    this.handleEndGame = this.handleEndGame.bind(this);\n    // Call `loadUser` before mounting the app\n    this.loadUser();\n  }\n\n  // Get latest user object from blockchain\n  loadUser() {\n    // Extract `setUser` of `UserAction` and `user.name` of UserReducer from redux\n    const { setUser, user: { name } } = this.props;\n    // Send request the blockchain by calling the ApiService,\n    // Get the user object and store the `win_count`, `lost_count` and `game_data` object\n    return ApiService.getUserByName(name).then(user => {\n      setUser({\n        win_count: user.win_count,\n        lost_count: user.lost_count,\n        game: user.game_data,\n      });\n      // Set the loading state to false for displaying the app\n      this.setState({ loading: false });\n    });\n  }\n\n  handleStartGame() {\n    // Send a request to API (blockchain) to start game\n    // And call `loadUser` again for react to render latest game status to UI\n    return ApiService.startGame().then(()=>{\n      return this.loadUser();\n    });\n  }\n\n  handlePlayCard(cardIdx) {\n    // Extract `user.game` of `UserReducer` from redux\n    const { user: { game } } = this.props;\n    // If it is an empty card, not going to do anything\n    if (game.hand_player[cardIdx] === 0) {\n      return;\n    }\n    // Show the loading indicator if the connection took too long\n    this.setState({ loading: true });\n    // Send a request to API (blockchain) to play card with card index\n    // And call `loadUser` again for react to render latest game status to UI\n    return ApiService.playCard(cardIdx).then(()=>{\n      return this.loadUser();\n    });\n  }\n\n  handleNextRound() {\n    // Send a request to API (blockchain) to trigger next round\n    // And call `loadUser` again for react to render latest game status to UI\n    return ApiService.nextRound().then(()=>{\n      return this.loadUser();\n    });\n  }\n\n  handleEndGame() {\n    // Send a request to API (blockchain) to end the game\n    // And call `loadUser` again for react to render latest game status to UI\n    return ApiService.endGame().then(()=>{\n      return this.loadUser();\n    });\n  }\n\n  render() {\n    // Extract data from state and user data of `UserReducer` from redux\n    const { loading } = this.state;\n    const { user: { name, win_count, lost_count, game } } = this.props;\n\n    // Flag to indicate if the game has started or not\n    // By checking if the deckCard of AI is still 17 (max card)\n    const isGameStarted = game && game.deck_ai.length !== 17;\n\n    // If game hasn't started, display `PlayerProfile`\n    // If game has started, display `GameMat`, `Resolution`, `Info` screen\n    return (\n      <section className={`Game${ (loading ? \" loading\" : \"\") }`}>\n        { !isGameStarted ?\n            <PlayerProfile\n              name={ name }\n              winCount={ win_count }\n              lostCount={ lost_count }\n              onLogout={ this.handleLogout }\n              onStartGame={ this.handleStartGame }\n            />\n          :\n            <div className=\"container\">\n              <GameMat\n                deckCardCount={ game.deck_ai.length }\n                aiLife={ game.life_ai }\n                aiHandCards={ game.hand_ai }\n                aiName=\"COMPUTER\"\n                playerLife={ game.life_player }\n                playerHandCards={ game.hand_player }\n                playerName={ name }\n                onPlayCard={ this.handlePlayCard }\n              />\n              <Resolution\n                status={ game.status }\n                aiCard={ game.selected_card_ai }\n                aiName=\"COMPUTER\"\n                aiLost={ game.life_lost_ai }\n                playerCard={ game.selected_card_player }\n                playerName={ name }\n                playerLost={ game.life_lost_player }\n                onNextRound={ this.handleNextRound }\n                onEndGame={ this.handleEndGame }\n              />\n              <GameInfo\n                deckCardCount={ game.deck_ai.length }\n                handCardCount={ game.hand_ai.filter( x => x > 0 ).length }\n                onEndGame={ this.handleEndGame }\n              />\n            </div>\n        }\n        {\n          isGameStarted && loading &&\n          <div className=\"spinner\">\n            <div className=\"image\"></div>\n            <div className=\"circles\">\n              <div className=\"circle\">\n                <div className=\"inner\"></div>\n              </div>\n              <div className=\"circle\">\n                <div className=\"inner\"></div>\n              </div>\n              <div className=\"circle\">\n                <div className=\"inner\"></div>\n              </div>\n              <div className=\"circle\">\n                <div className=\"inner\"></div>\n              </div>\n              <div className=\"circle\">\n                <div className=\"inner\"></div>\n              </div>\n            </div>\n          </div>\n        }\n      </section>\n    )\n  }\n\n}\n\n// Map all state to component props (for redux to connect)\nconst mapStateToProps = state => state;\n\n// Map the following action to props\nconst mapDispatchToProps = {\n  setUser: UserAction.setUser,\n};\n\n// Export a redux connected component\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n"]},"metadata":{},"sourceType":"module"}