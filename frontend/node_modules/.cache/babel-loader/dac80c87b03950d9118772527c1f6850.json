{"ast":null,"code":"var _jsxFileName = \"/Users/fixsc/Documents/eosioProject/frontend/src/components/Game/components/Resolution/Resolution.jsx\";\nimport React, { Component } from 'react'; // Components\n\nimport { Button } from 'components'; // Game subcomponents\n\nimport { Card } from '../';\n\nclass Resolution extends Component {\n  render() {\n    // Extract data and event functions from props\n    const _this$props = this.props,\n          aiCard = _this$props.aiCard,\n          aiName = _this$props.aiName,\n          aiLost = _this$props.aiLost,\n          playerCard = _this$props.playerCard,\n          playerName = _this$props.playerName,\n          playerLost = _this$props.playerLost,\n          status = _this$props.status,\n          onNextRound = _this$props.onNextRound,\n          onEndGame = _this$props.onEndGame; // Flag to indicate if the resolution screen should be shown\n    // By checking if aiSelectCard is not empty\n\n    const isCardSelected = aiCard > 0; // Store the result of each round and decide where to put the \"WIN\" or \"DRAW\"\n\n    let aiRoundResult = \"\";\n    let playerRoundResult = \"\";\n\n    if (aiLost === 0 && playerLost === 0) {\n      aiRoundResult = \"DRAW\";\n      playerRoundResult = \"DRAW\";\n    } else if (aiLost === 0) {\n      aiRoundResult = \"WIN\";\n      playerRoundResult = React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, \"- \", playerLost);\n    } else {\n      aiRoundResult = React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, \"- \", aiLost);\n      playerRoundResult = \"WIN\";\n    } // If state === 1, display \"YOU WIN!\" (player wins)\n    // If state === -1, display \"YOU LOST!\" (player loses)\n    // And display: 1 div for left selected card\n    //              1 div for showing VS text\n    //              1 div for right selected card\n    // And put the buttons for next round or end game\n\n\n    return React.createElement(\"div\", {\n      className: \"Resolution\".concat(isCardSelected ? \" card-selected\" : \"\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, status === 1 && React.createElement(\"div\", {\n      className: \"result win\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, \"VICTORY\"), status === -1 && React.createElement(\"div\", {\n      className: \"result lost\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, \"DEFEATED\"), React.createElement(\"div\", {\n      className: \"player\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"round-result\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, isCardSelected && playerRoundResult), React.createElement(Card, {\n      cardId: playerCard,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      className: \"name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, playerName)), React.createElement(\"div\", {\n      className: \"vs\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, \"VS\"), React.createElement(\"div\", {\n      className: \"ai\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"round-result\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, isCardSelected && aiRoundResult), React.createElement(Card, {\n      cardId: aiCard,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      className: \"name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, aiName)), React.createElement(\"div\", {\n      className: \"buttons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, isCardSelected && status === 0 && React.createElement(Button, {\n      onClick: onNextRound,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"NEXT ROUND\"), isCardSelected && status !== 0 && React.createElement(Button, {\n      onClick: onEndGame,\n      className: \"red\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"QUIT\"))));\n  }\n\n}\n\nexport default Resolution;","map":{"version":3,"sources":["/Users/fixsc/Documents/eosioProject/frontend/src/components/Game/components/Resolution/Resolution.jsx"],"names":["React","Component","Button","Card","Resolution","render","props","aiCard","aiName","aiLost","playerCard","playerName","playerLost","status","onNextRound","onEndGame","isCardSelected","aiRoundResult","playerRoundResult"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n// Components\nimport { Button } from 'components';\n// Game subcomponents\nimport { Card } from '../';\n\nclass Resolution extends Component {\n  render() {\n    // Extract data and event functions from props\n    const { aiCard, aiName, aiLost,\n            playerCard, playerName, playerLost,\n            status, onNextRound, onEndGame } = this.props;\n\n    // Flag to indicate if the resolution screen should be shown\n    // By checking if aiSelectCard is not empty\n    const isCardSelected = aiCard > 0;\n\n    // Store the result of each round and decide where to put the \"WIN\" or \"DRAW\"\n    let aiRoundResult = \"\";\n    let playerRoundResult = \"\";\n    if (aiLost === 0 && playerLost === 0) {\n      aiRoundResult = \"DRAW\";\n      playerRoundResult = \"DRAW\";\n    } else if (aiLost === 0) {\n      aiRoundResult = \"WIN\";\n      playerRoundResult = <span>- { playerLost }</span>;\n    } else {\n      aiRoundResult = <span>- { aiLost }</span>;\n      playerRoundResult = \"WIN\";\n    }\n\n    // If state === 1, display \"YOU WIN!\" (player wins)\n    // If state === -1, display \"YOU LOST!\" (player loses)\n    // And display: 1 div for left selected card\n    //              1 div for showing VS text\n    //              1 div for right selected card\n    // And put the buttons for next round or end game\n    return (\n      <div className={`Resolution${ isCardSelected ? \" card-selected\" : \"\" }`}>\n        <div>\n          { status === 1 && <div className=\"result win\">VICTORY</div> }\n          { status === -1 && <div className=\"result lost\">DEFEATED</div> }\n          <div className=\"player\">\n            <p className=\"round-result\">{ isCardSelected && playerRoundResult }</p>\n            <Card cardId={ playerCard } />\n            <p className=\"name\">{ playerName }</p>\n          </div>\n          <div className=\"vs\">{ \"VS\" }</div>\n          <div className=\"ai\">\n            <p className=\"round-result\">{ isCardSelected && aiRoundResult }</p>\n            <Card cardId={ aiCard } />\n            <p className=\"name\">{ aiName }</p>\n          </div>\n          <div className=\"buttons\">\n            { isCardSelected && status === 0 &&\n                <Button onClick={ onNextRound }>NEXT ROUND</Button> }\n            { isCardSelected && status !== 0 &&\n                <Button onClick={ onEndGame } className=\"red\">QUIT</Button> }\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Resolution;\n"]},"metadata":{},"sourceType":"module"}