{"ast":null,"code":"var _jsxFileName = \"/Users/fixsc/Documents/eosioProject/frontend/src/components/App/App.jsx\";\n// React core\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux'; // Components\n\nimport { Game, Login } from 'components'; // Services and redux action\n\nimport { UserAction } from 'actions';\nimport { ApiService } from 'services';\n\nclass App extends Component {\n  constructor(props) {\n    // Inherit constructor\n    super(props); // State for showing/hiding components when the API (blockchain) request is loading\n\n    this.state = {\n      loading: true\n    }; // Bind functions\n\n    this.getCurrentUser = this.getCurrentUser.bind(this); // Call getCurrentUser before mounting the app\n\n    this.getCurrentUser();\n  }\n\n  getCurrentUser() {\n    // Extract setUser of UserAction from redux\n    const setUser = this.props.setUser; // Send a request to API (blockchain) to get the current logged in user\n\n    return ApiService.getCurrentUser() // If the server return a username\n    .then(username => {\n      // Save the username to redux store\n      // For structure, ref: ./frontend/src/reducers/UserReducer.js\n      setUser({\n        name: username\n      });\n    }) // To ignore 401 console error\n    .catch(() => {}) // Run the following function no matter the server return success or error\n    .finally(() => {\n      // Set the loading state to false for displaying the app\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  render() {\n    // Extract data from state and props (`user` is from redux)\n    const loading = this.state.loading;\n    const _this$props$user = this.props.user,\n          name = _this$props$user.name,\n          game = _this$props$user.game; // Determine the app status for styling\n\n    let appStatus = \"login\";\n\n    if (game && game.status !== 0) {\n      appStatus = \"game-ended\";\n    } else if (game && game.selected_card_ai > 0) {\n      appStatus = \"card-selected\";\n    } else if (game && game.deck_ai.length !== 17) {\n      appStatus = \"started\";\n    } else if (name) {\n      appStatus = \"profile\";\n    } // Set class according to loading state, it will hide the app (ref to css file)\n    // If the username is set in redux, display the Game component\n    // If the username is NOT set in redux, display the Login component\n\n\n    return React.createElement(\"div\", {\n      className: \"App status-\".concat(appStatus).concat(loading ? \" loading\" : \"\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, name && React.createElement(Game, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }), !name && React.createElement(Login, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }));\n  }\n\n} // Map all state to component props (for redux to connect)\n\n\nconst mapStateToProps = state => state; // Map the following action to props\n\n\nconst mapDispatchToProps = {\n  setUser: UserAction.setUser\n}; // Export a redux connected component\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/fixsc/Documents/eosioProject/frontend/src/components/App/App.jsx"],"names":["React","Component","connect","Game","Login","UserAction","ApiService","App","constructor","props","state","loading","getCurrentUser","bind","setUser","then","username","name","catch","finally","setState","render","user","game","appStatus","status","selected_card_ai","deck_ai","length","mapStateToProps","mapDispatchToProps"],"mappings":";AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CACA;;AACA,SAASC,IAAT,EAAeC,KAAf,QAA4B,YAA5B,C,CACA;;AACA,SAASC,UAAT,QAA2B,SAA3B;AACA,SAASC,UAAT,QAA2B,UAA3B;;AAEA,MAAMC,GAAN,SAAkBN,SAAlB,CAA4B;AAE1BO,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB;AACA,UAAMA,KAAN,EAFiB,CAGjB;;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE;AADE,KAAb,CAJiB,CAOjB;;AACA,SAAKC,cAAL,GAAsB,KAAKA,cAAL,CAAoBC,IAApB,CAAyB,IAAzB,CAAtB,CARiB,CASjB;;AACA,SAAKD,cAAL;AACD;;AAEDA,EAAAA,cAAc,GAAG;AACf;AADe,UAEPE,OAFO,GAEK,KAAKL,KAFV,CAEPK,OAFO,EAGf;;AACA,WAAOR,UAAU,CAACM,cAAX,GACL;AADK,KAEJG,IAFI,CAECC,QAAQ,IAAI;AAChB;AACA;AACAF,MAAAA,OAAO,CAAC;AAAEG,QAAAA,IAAI,EAAED;AAAR,OAAD,CAAP;AACD,KANI,EAOL;AAPK,KAQJE,KARI,CAQE,MAAM,CAAE,CARV,EASL;AATK,KAUJC,OAVI,CAUI,MAAM;AACb;AACA,WAAKC,QAAL,CAAc;AAAET,QAAAA,OAAO,EAAE;AAAX,OAAd;AACD,KAbI,CAAP;AAcD;;AAEDU,EAAAA,MAAM,GAAG;AACP;AADO,UAECV,OAFD,GAEa,KAAKD,KAFlB,CAECC,OAFD;AAAA,6BAG0B,KAAKF,KAH/B,CAGCa,IAHD;AAAA,UAGSL,IAHT,oBAGSA,IAHT;AAAA,UAGeM,IAHf,oBAGeA,IAHf,EAKP;;AACA,QAAIC,SAAS,GAAG,OAAhB;;AACA,QAAID,IAAI,IAAIA,IAAI,CAACE,MAAL,KAAgB,CAA5B,EAA+B;AAC7BD,MAAAA,SAAS,GAAG,YAAZ;AACD,KAFD,MAEO,IAAID,IAAI,IAAIA,IAAI,CAACG,gBAAL,GAAwB,CAApC,EAAuC;AAC5CF,MAAAA,SAAS,GAAG,eAAZ;AACD,KAFM,MAEA,IAAID,IAAI,IAAIA,IAAI,CAACI,OAAL,CAAaC,MAAb,KAAwB,EAApC,EAAwC;AAC7CJ,MAAAA,SAAS,GAAG,SAAZ;AACD,KAFM,MAEA,IAAIP,IAAJ,EAAU;AACfO,MAAAA,SAAS,GAAG,SAAZ;AACD,KAfM,CAiBP;AACA;AACA;;;AACA,WACE;AAAK,MAAA,SAAS,uBAAkBA,SAAlB,SAAgCb,OAAO,GAAG,UAAH,GAAgB,EAAvD,CAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACIM,IAAI,IAAI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADZ,EAEI,CAACA,IAAD,IAAS,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFb,CADF;AAMD;;AA7DyB,C,CAiE5B;;;AACA,MAAMY,eAAe,GAAGnB,KAAK,IAAIA,KAAjC,C,CAEA;;;AACA,MAAMoB,kBAAkB,GAAG;AACzBhB,EAAAA,OAAO,EAAET,UAAU,CAACS;AADK,CAA3B,C,CAIA;;AACA,eAAeZ,OAAO,CAAC2B,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CvB,GAA7C,CAAf","sourcesContent":["// React core\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n// Components\nimport { Game, Login } from 'components';\n// Services and redux action\nimport { UserAction } from 'actions';\nimport { ApiService } from 'services';\n\nclass App extends Component {\n\n  constructor(props) {\n    // Inherit constructor\n    super(props);\n    // State for showing/hiding components when the API (blockchain) request is loading\n    this.state = {\n      loading: true,\n    };\n    // Bind functions\n    this.getCurrentUser = this.getCurrentUser.bind(this);\n    // Call getCurrentUser before mounting the app\n    this.getCurrentUser();\n  }\n\n  getCurrentUser() {\n    // Extract setUser of UserAction from redux\n    const { setUser } = this.props;\n    // Send a request to API (blockchain) to get the current logged in user\n    return ApiService.getCurrentUser()\n      // If the server return a username\n      .then(username => {\n        // Save the username to redux store\n        // For structure, ref: ./frontend/src/reducers/UserReducer.js\n        setUser({ name: username });\n      })\n      // To ignore 401 console error\n      .catch(() => {})\n      // Run the following function no matter the server return success or error\n      .finally(() => {\n        // Set the loading state to false for displaying the app\n        this.setState({ loading: false });\n      });\n  }\n\n  render() {\n    // Extract data from state and props (`user` is from redux)\n    const { loading } = this.state;\n    const { user: { name, game } } = this.props;\n\n    // Determine the app status for styling\n    let appStatus = \"login\";\n    if (game && game.status !== 0) {\n      appStatus = \"game-ended\";\n    } else if (game && game.selected_card_ai > 0) {\n      appStatus = \"card-selected\";\n    } else if (game && game.deck_ai.length !== 17) {\n      appStatus = \"started\";\n    } else if (name) {\n      appStatus = \"profile\";\n    }\n\n    // Set class according to loading state, it will hide the app (ref to css file)\n    // If the username is set in redux, display the Game component\n    // If the username is NOT set in redux, display the Login component\n    return (\n      <div className={ `App status-${ appStatus }${ loading ? \" loading\" : \"\" }` }>\n        { name && <Game /> }\n        { !name && <Login /> }\n      </div>\n    );\n  }\n\n}\n\n// Map all state to component props (for redux to connect)\nconst mapStateToProps = state => state;\n\n// Map the following action to props\nconst mapDispatchToProps = {\n  setUser: UserAction.setUser,\n};\n\n// Export a redux connected component\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}