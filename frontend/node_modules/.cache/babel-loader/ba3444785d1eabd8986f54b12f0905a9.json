{"ast":null,"code":"var _jsxFileName = \"/Users/fixsc/Documents/eosioProject/frontend/src/components/Game/components/Card/Card.jsx\";\nimport React, { Component } from 'react'; // Card dictionary from smart contract\n// { [cardType, cardPower], ... }\n\nconst cardDict = [[0, 0], // empty card (for the case the card is played or empty selected card)\n[1, 1], [1, 1], [1, 2], [1, 2], [1, 3], [2, 1], [2, 1], [2, 2], [2, 2], [2, 3], [3, 1], [3, 1], [3, 2], [3, 2], [3, 3], [4, 3], [5, 0]];\n\nclass Card extends Component {\n  render() {\n    // Extract card index (cardId) and onClick event function from props\n    const _this$props = this.props,\n          cardId = _this$props.cardId,\n          onClick = _this$props.onClick; // If it is not an empty card and onClick is set, set Tag as <a>, <div> otherwise\n\n    const Tag = cardId !== 0 && onClick ? \"a\" : \"span\"; // Determine the card element\n\n    let cardType = \"\";\n\n    switch (cardDict[cardId][0]) {\n      case 1:\n        cardType = \"FIRE\";\n        break;\n\n      case 2:\n        cardType = \"WOOD\";\n        break;\n\n      case 3:\n        cardType = \"WATER\";\n        break;\n\n      case 4:\n      case 5:\n        cardType = \"SPECIAL\";\n        break;\n\n      default:\n        cardType = \"EMPTY\";\n    }\n\n    return React.createElement(Tag, {\n      className: \"Card \".concat(\"type\" + cardDict[cardId][0], \" \").concat(\"card\" + cardId),\n      onClick: onClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"type\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, cardType), React.createElement(\"span\", {\n      className: \"power\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, cardId !== 0 && cardDict[cardId][1]));\n  }\n\n}\n\nexport default Card;","map":{"version":3,"sources":["/Users/fixsc/Documents/eosioProject/frontend/src/components/Game/components/Card/Card.jsx"],"names":["React","Component","cardDict","Card","render","props","cardId","onClick","Tag","cardType"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CAEA;AACA;;AACA,MAAMC,QAAQ,GAAG,CACf,CAAC,CAAD,EAAI,CAAJ,CADe,EACP;AACR,CAAC,CAAD,EAAI,CAAJ,CAFe,EAEP,CAAC,CAAD,EAAI,CAAJ,CAFO,EAGf,CAAC,CAAD,EAAI,CAAJ,CAHe,EAGP,CAAC,CAAD,EAAI,CAAJ,CAHO,EAIf,CAAC,CAAD,EAAI,CAAJ,CAJe,EAKf,CAAC,CAAD,EAAI,CAAJ,CALe,EAKP,CAAC,CAAD,EAAI,CAAJ,CALO,EAMf,CAAC,CAAD,EAAI,CAAJ,CANe,EAMP,CAAC,CAAD,EAAI,CAAJ,CANO,EAOf,CAAC,CAAD,EAAI,CAAJ,CAPe,EAQf,CAAC,CAAD,EAAI,CAAJ,CARe,EAQP,CAAC,CAAD,EAAI,CAAJ,CARO,EASf,CAAC,CAAD,EAAI,CAAJ,CATe,EASP,CAAC,CAAD,EAAI,CAAJ,CATO,EAUf,CAAC,CAAD,EAAI,CAAJ,CAVe,EAWf,CAAC,CAAD,EAAI,CAAJ,CAXe,EAYf,CAAC,CAAD,EAAI,CAAJ,CAZe,CAAjB;;AAeA,MAAMC,IAAN,SAAmBF,SAAnB,CAA6B;AAC3BG,EAAAA,MAAM,GAAG;AACP;AADO,wBAEqB,KAAKC,KAF1B;AAAA,UAECC,MAFD,eAECA,MAFD;AAAA,UAESC,OAFT,eAESA,OAFT,EAGP;;AACA,UAAMC,GAAG,GAAGF,MAAM,KAAK,CAAX,IAAgBC,OAAhB,eAAZ,CAJO,CAKP;;AACA,QAAIE,QAAQ,GAAG,EAAf;;AACA,YAAQP,QAAQ,CAACI,MAAD,CAAR,CAAiB,CAAjB,CAAR;AACE,WAAK,CAAL;AACEG,QAAAA,QAAQ,GAAG,MAAX;AACA;;AACF,WAAK,CAAL;AACEA,QAAAA,QAAQ,GAAG,MAAX;AACA;;AACF,WAAK,CAAL;AACEA,QAAAA,QAAQ,GAAG,OAAX;AACA;;AACF,WAAK,CAAL;AACA,WAAK,CAAL;AACEA,QAAAA,QAAQ,GAAG,SAAX;AACA;;AACF;AACEA,QAAAA,QAAQ,GAAG,OAAX;AAfJ;;AAiBA,WACE,oBAAC,GAAD;AACE,MAAA,SAAS,iBAAY,SAASP,QAAQ,CAACI,MAAD,CAAR,CAAiB,CAAjB,CAArB,cAA8C,SAASA,MAAvD,CADX;AAEE,MAAA,OAAO,EAAGC,OAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGE;AAAM,MAAA,SAAS,EAAC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAyBE,QAAzB,CAHF,EAIE;AAAM,MAAA,SAAS,EAAC,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA0BH,MAAM,KAAK,CAAX,IAAgBJ,QAAQ,CAACI,MAAD,CAAR,CAAiB,CAAjB,CAA1C,CAJF,CADF;AAQD;;AAjC0B;;AAoC7B,eAAeH,IAAf","sourcesContent":["import React, { Component } from 'react';\n\n// Card dictionary from smart contract\n// { [cardType, cardPower], ... }\nconst cardDict = [\n  [0, 0], // empty card (for the case the card is played or empty selected card)\n  [1, 1], [1, 1],\n  [1, 2], [1, 2],\n  [1, 3],\n  [2, 1], [2, 1],\n  [2, 2], [2, 2],\n  [2, 3],\n  [3, 1], [3, 1],\n  [3, 2], [3, 2],\n  [3, 3],\n  [4, 3],\n  [5, 0]\n];\n\nclass Card extends Component {\n  render() {\n    // Extract card index (cardId) and onClick event function from props\n    const { cardId, onClick } = this.props;\n    // If it is not an empty card and onClick is set, set Tag as <a>, <div> otherwise\n    const Tag = cardId !== 0 && onClick ? `a` : `span`;\n    // Determine the card element\n    let cardType = \"\";\n    switch (cardDict[cardId][0]) {\n      case 1:\n        cardType = \"FIRE\";\n        break;\n      case 2:\n        cardType = \"WOOD\";\n        break;\n      case 3:\n        cardType = \"WATER\";\n        break;\n      case 4:\n      case 5:\n        cardType = \"SPECIAL\";\n        break;\n      default:\n        cardType = \"EMPTY\";\n    }\n    return (\n      <Tag\n        className={ `Card ${ \"type\" + cardDict[cardId][0] } ${ \"card\" + cardId }` }\n        onClick={ onClick }>\n        <span className=\"type\">{ cardType }</span>\n        <span className=\"power\">{ cardId !== 0 && cardDict[cardId][1] }</span>\n      </Tag>\n    )\n  }\n}\n\nexport default Card;\n"]},"metadata":{},"sourceType":"module"}