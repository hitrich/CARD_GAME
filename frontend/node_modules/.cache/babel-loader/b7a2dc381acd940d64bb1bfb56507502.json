{"ast":null,"code":"import { Api, JsonRpc } from 'eosjs';\nimport { JsSignatureProvider } from 'eosjs/dist/eosjs-jssig'; // Main action call to blockchain\n\nasync function takeAction(action, dataValue) {\n  const privateKey = localStorage.getItem(\"cardgame_key\");\n  const rpc = new JsonRpc(process.env.REACT_APP_EOS_HTTP_ENDPOINT);\n  const signatureProvider = new JsSignatureProvider([privateKey]);\n  const api = new Api({\n    rpc,\n    signatureProvider,\n    textDecoder: new TextDecoder(),\n    textEncoder: new TextEncoder()\n  }); // Main call to blockchain after setting action, account_name and data\n\n  try {\n    const resultWithConfig = await api.transact({\n      actions: [{\n        account: process.env.REACT_APP_EOS_CONTRACT_NAME,\n        name: action,\n        authorization: [{\n          actor: localStorage.getItem(\"cardgame_account\"),\n          permission: 'active'\n        }],\n        data: dataValue\n      }]\n    }, {\n      blocksBehind: 3,\n      expireSeconds: 30\n    });\n    return resultWithConfig;\n  } catch (err) {\n    throw err;\n  }\n}\n\nclass ApiService {\n  static getCurrentUser() {\n    return new Promise((resolve, reject) => {\n      if (!localStorage.getItem(\"cardgame_account\")) {\n        return reject();\n      }\n\n      takeAction(\"login\", {\n        username: localStorage.getItem(\"cardgame_account\")\n      }).then(() => {\n        resolve(localStorage.getItem(\"cardgame_account\"));\n      }).catch(err => {\n        localStorage.removeItem(\"cardgame_account\");\n        localStorage.removeItem(\"cardgame_key\");\n        reject(err);\n      });\n    });\n  }\n\n  static login({\n    username,\n    key\n  }) {\n    return new Promise((resolve, reject) => {\n      localStorage.setItem(\"cardgame_account\", username);\n      localStorage.setItem(\"cardgame_key\", key);\n      takeAction(\"login\", {\n        username: username\n      }).then(() => {\n        resolve();\n      }).catch(err => {\n        localStorage.removeItem(\"cardgame_account\");\n        localStorage.removeItem(\"cardgame_key\");\n        reject(err);\n      });\n    });\n  }\n\n  static startGame() {\n    return takeAction(\"startgame\", {\n      username: localStorage.getItem(\"cardgame_account\")\n    });\n  }\n\n  static playCard(cardIdx) {\n    return takeAction(\"playcard\", {\n      username: localStorage.getItem(\"cardgame_account\"),\n      player_card_idx: cardIdx\n    });\n  }\n\n  static nextRound() {\n    return takeAction(\"nextround\", {\n      username: localStorage.getItem(\"cardgame_account\")\n    });\n  }\n\n  static endGame() {\n    return takeAction(\"endgame\", {\n      username: localStorage.getItem(\"cardgame_account\")\n    });\n  }\n\n  static async getUserByName(username) {\n    try {\n      const rpc = new JsonRpc(process.env.REACT_APP_EOS_HTTP_ENDPOINT);\n      const result = await rpc.get_table_rows({\n        \"json\": true,\n        \"code\": process.env.REACT_APP_EOS_CONTRACT_NAME,\n        // contract who owns the table\n        \"scope\": process.env.REACT_APP_EOS_CONTRACT_NAME,\n        // scope of the table\n        \"table\": \"users\",\n        // name of the table as specified by the contract abi\n        \"limit\": 1,\n        \"lower_bound\": username\n      });\n      return result.rows[0];\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n}\n\nexport default ApiService;","map":{"version":3,"sources":["/Users/fixsc/Documents/eosioProject/frontend/src/services/ApiService.js"],"names":["Api","JsonRpc","JsSignatureProvider","takeAction","action","dataValue","privateKey","localStorage","getItem","rpc","process","env","REACT_APP_EOS_HTTP_ENDPOINT","signatureProvider","api","textDecoder","TextDecoder","textEncoder","TextEncoder","resultWithConfig","transact","actions","account","REACT_APP_EOS_CONTRACT_NAME","name","authorization","actor","permission","data","blocksBehind","expireSeconds","err","ApiService","getCurrentUser","Promise","resolve","reject","username","then","catch","removeItem","login","key","setItem","startGame","playCard","cardIdx","player_card_idx","nextRound","endGame","getUserByName","result","get_table_rows","rows","console","error"],"mappings":"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","sourcesContent":["import { Api, JsonRpc } from 'eosjs';\nimport { JsSignatureProvider } from 'eosjs/dist/eosjs-jssig'\n\n// Main action call to blockchain\nasync function takeAction(action, dataValue) {\n  const privateKey = localStorage.getItem(\"cardgame_key\");\n  const rpc = new JsonRpc(process.env.REACT_APP_EOS_HTTP_ENDPOINT);\n  const signatureProvider = new JsSignatureProvider([privateKey]);\n  const api = new Api({ rpc, signatureProvider, textDecoder: new TextDecoder(), textEncoder: new TextEncoder() });\n\n  // Main call to blockchain after setting action, account_name and data\n  try {\n    const resultWithConfig = await api.transact({\n      actions: [{\n        account: process.env.REACT_APP_EOS_CONTRACT_NAME,\n        name: action,\n        authorization: [{\n          actor: localStorage.getItem(\"cardgame_account\"),\n          permission: 'active',\n        }],\n        data: dataValue,\n      }]\n    }, {\n      blocksBehind: 3,\n      expireSeconds: 30,\n    });\n    return resultWithConfig;\n  } catch (err) {\n    throw(err)\n  }\n}\n\nclass ApiService {\n\n  static getCurrentUser() {\n    return new Promise((resolve, reject) => {\n      if (!localStorage.getItem(\"cardgame_account\")) {\n        return reject();\n      }\n      takeAction(\"login\", { username: localStorage.getItem(\"cardgame_account\") })\n        .then(() => {\n          resolve(localStorage.getItem(\"cardgame_account\"));\n        })\n        .catch(err => {\n          localStorage.removeItem(\"cardgame_account\");\n          localStorage.removeItem(\"cardgame_key\");\n          reject(err);\n        });\n    });\n  }\n\n  static login({ username, key }) {\n    return new Promise((resolve, reject) => {\n      localStorage.setItem(\"cardgame_account\", username);\n      localStorage.setItem(\"cardgame_key\", key);\n      takeAction(\"login\", { username: username })\n        .then(() => {\n          resolve();\n        })\n        .catch(err => {\n          localStorage.removeItem(\"cardgame_account\");\n          localStorage.removeItem(\"cardgame_key\");\n          reject(err);\n        });\n    });\n  }\n\n  static startGame() {\n    return takeAction(\"startgame\", { username: localStorage.getItem(\"cardgame_account\") });\n  }\n\n  static playCard(cardIdx) {\n    return takeAction(\"playcard\", { username: localStorage.getItem(\"cardgame_account\"), player_card_idx: cardIdx });\n  }\n\n  static nextRound() {\n    return takeAction(\"nextround\", { username: localStorage.getItem(\"cardgame_account\") });\n  }\n\n  static endGame() {\n    return takeAction(\"endgame\", { username: localStorage.getItem(\"cardgame_account\") });\n  }\n\n  static async getUserByName(username) {\n    try {\n      const rpc = new JsonRpc(process.env.REACT_APP_EOS_HTTP_ENDPOINT);\n      const result = await rpc.get_table_rows({\n        \"json\": true,\n        \"code\": process.env.REACT_APP_EOS_CONTRACT_NAME,    // contract who owns the table\n        \"scope\": process.env.REACT_APP_EOS_CONTRACT_NAME,   // scope of the table\n        \"table\": \"users\",    // name of the table as specified by the contract abi\n        \"limit\": 1,\n        \"lower_bound\": username,\n      });\n      return result.rows[0];\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n}\n\nexport default ApiService;\n"]},"metadata":{},"sourceType":"module"}