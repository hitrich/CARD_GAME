{"ast":null,"code":"var _jsxFileName = \"/Users/fixsc/Documents/eosioProject/frontend/src/components/Button/Button.jsx\";\nimport React, { Component } from 'react';\n\nclass Button extends Component {\n  constructor(props) {\n    // Inherit constructor\n    super(props); // Component state setup\n\n    this.state = {\n      loading: false\n    }; // Bind functions\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    const onClick = this.props.onClick; // Show the loading indicator in case the action to be performed takes too long\n\n    this.setState({\n      loading: true\n    }); // If the prop onClick is a function, invoke it and stores its return value in ``promise``\n    // If the prop onClick is NOT a function, the value of ``promise`` will be false\n\n    const promise = typeof onClick === \"function\" && onClick(); // If ``promise`` is a function (a Promise), invoke setState after it has been resolved.\n\n    if (promise && typeof promise.then === \"function\") {\n      return promise.then(() => {\n        this.isComponentMounted && this.setState({\n          loading: false\n        });\n      });\n    } // Otherwise, just invoke setState directly\n\n\n    this.isComponentMounted && this.setState({\n      loading: false\n    });\n  }\n\n  componentDidMount() {\n    this.isComponentMounted = true;\n  }\n\n  componentWillUnmount() {\n    this.isComponentMounted = false;\n  }\n\n  render() {\n    const _this$props = this.props,\n          className = _this$props.className,\n          type = _this$props.type,\n          style = _this$props.style,\n          children = _this$props.children;\n    let loading = this.state.loading; // Enable the loading CSS class if either the private state attribute `loading`\n    // or the props `loading` is true\n\n    loading = loading || this.props.loading;\n    return React.createElement(\"button\", Object.assign({\n      className: \"Button\".concat(className ? ' ' + className : '').concat(loading ? ' loading' : ''),\n      onClick: this.handleClick\n    }, {\n      type,\n      style\n    }, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }), children);\n  }\n\n}\n\nexport default Button;","map":{"version":3,"sources":["/Users/fixsc/Documents/eosioProject/frontend/src/components/Button/Button.jsx"],"names":["React","Component","Button","constructor","props","state","loading","handleClick","bind","onClick","setState","promise","then","isComponentMounted","componentDidMount","componentWillUnmount","render","className","type","style","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,MAAMC,MAAN,SAAqBD,SAArB,CAA+B;AAE7BE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB;AACA,UAAMA,KAAN,EAFiB,CAGjB;;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE;AADE,KAAb,CAJiB,CAOjB;;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACD;;AAEDD,EAAAA,WAAW,GAAG;AAAA,UACJE,OADI,GACQ,KAAKL,KADb,CACJK,OADI,EAEZ;;AACA,SAAKC,QAAL,CAAc;AAAEJ,MAAAA,OAAO,EAAE;AAAX,KAAd,EAHY,CAKZ;AACA;;AACA,UAAMK,OAAO,GAAG,OAAOF,OAAP,KAAmB,UAAnB,IAAiCA,OAAO,EAAxD,CAPY,CASZ;;AACA,QAAIE,OAAO,IAAI,OAAOA,OAAO,CAACC,IAAf,KAAwB,UAAvC,EAAmD;AACjD,aAAOD,OAAO,CAACC,IAAR,CAAa,MAAM;AACxB,aAAKC,kBAAL,IAA2B,KAAKH,QAAL,CAAc;AAAEJ,UAAAA,OAAO,EAAE;AAAX,SAAd,CAA3B;AACD,OAFM,CAAP;AAGD,KAdW,CAeZ;;;AACA,SAAKO,kBAAL,IAA2B,KAAKH,QAAL,CAAc;AAAEJ,MAAAA,OAAO,EAAE;AAAX,KAAd,CAA3B;AACD;;AAEDQ,EAAAA,iBAAiB,GAAG;AAClB,SAAKD,kBAAL,GAA0B,IAA1B;AACD;;AAEDE,EAAAA,oBAAoB,GAAG;AACrB,SAAKF,kBAAL,GAA0B,KAA1B;AACD;;AAEDG,EAAAA,MAAM,GAAG;AAAA,wBACsC,KAAKZ,KAD3C;AAAA,UACCa,SADD,eACCA,SADD;AAAA,UACYC,IADZ,eACYA,IADZ;AAAA,UACkBC,KADlB,eACkBA,KADlB;AAAA,UACyBC,QADzB,eACyBA,QADzB;AAAA,QAEDd,OAFC,GAEW,KAAKD,KAFhB,CAEDC,OAFC,EAGP;AACA;;AACAA,IAAAA,OAAO,GAAGA,OAAO,IAAI,KAAKF,KAAL,CAAWE,OAAhC;AACA,WACE;AACE,MAAA,SAAS,kBAAYW,SAAS,GAAG,MAAMA,SAAT,GAAqB,EAA1C,SAAiDX,OAAO,GAAG,UAAH,GAAgB,EAAxE,CADX;AAEE,MAAA,OAAO,EAAG,KAAKC;AAFjB,OAGO;AAAEW,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAIGC,QAJH,CADF;AAOD;;AArD4B;;AAyD/B,eAAelB,MAAf","sourcesContent":["import React, { Component } from 'react';\n\nclass Button extends Component {\n\n  constructor(props) {\n    // Inherit constructor\n    super(props);\n    // Component state setup\n    this.state = {\n      loading: false,\n    };\n    // Bind functions\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    const { onClick } = this.props;\n    // Show the loading indicator in case the action to be performed takes too long\n    this.setState({ loading: true });\n\n    // If the prop onClick is a function, invoke it and stores its return value in ``promise``\n    // If the prop onClick is NOT a function, the value of ``promise`` will be false\n    const promise = typeof onClick === \"function\" && onClick();\n\n    // If ``promise`` is a function (a Promise), invoke setState after it has been resolved.\n    if (promise && typeof promise.then === \"function\") {\n      return promise.then(() => {\n        this.isComponentMounted && this.setState({ loading: false });\n      });\n    }\n    // Otherwise, just invoke setState directly\n    this.isComponentMounted && this.setState({ loading: false });\n  }\n\n  componentDidMount() {\n    this.isComponentMounted = true;\n  }\n\n  componentWillUnmount() {\n    this.isComponentMounted = false;\n  }\n\n  render() {\n    const { className, type, style, children } = this.props;\n    let { loading } = this.state;\n    // Enable the loading CSS class if either the private state attribute `loading`\n    // or the props `loading` is true\n    loading = loading || this.props.loading;\n    return (\n      <button\n        className={`Button${ className ? ' ' + className : '' }${ loading ? ' loading' : '' }`}\n        onClick={ this.handleClick }\n        { ...{ type, style } }\n      >{ children }</button>\n    );\n  }\n\n}\n\nexport default Button;\n"]},"metadata":{},"sourceType":"module"}